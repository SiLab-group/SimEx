# Overall SimEx settings
# possible modes exploration (this one) and exploitation (mod with prob trees)
import os
import datetime
from dataclasses import dataclass, field

timestamp = datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
@dataclass
class SimexSettings:
    """Define variables for the settings of the Simex

    Attributes:
    instance_name (str): The settings instance name. No default value.
    do_plot: (bool): Enables plot in the modifier of the final modifier points. Default value is 'False'.
    extensive_search (bool): Enables complete exploration by setting modifier_data_point to 1 and enabling extensive iteration. Default value is 'False'.
    extensive_iteration (bool): Gets enabled when extensive search is True (TODO: Refactor) . Default value is 'False'.
    SimEx_mode (str): The mode of simex only exploration implemented. Default value 'exploration'.
    max_workers (int): The maximum number of parallel workers. Default value is '14'.
    domain_min_interval (int): The minimum of the input domain. Default value is '2500'
    domain_max_interval (int): The maximum of the input domain. Default value is '4000'
    modifier_incremental_unit (int): Minimal incremental unit is the smallest allowed step_size. Default value is set to '25'. Note: If extensive search True then minimal increment is set to '1'.
    modifier_data_point (int): Data point step size on the X axis in the first round. Default value is set to '100'. In next iterations modifier_data_point = modifier_data_point - modifier_incremental_unit until modifier_data_point < minimal_increment_unit.
    add_first_last_point (bool): Adding first and last point of the interval generated by the modifier. Default value is set to 'True'. Note: Smoothens the final function.
    vfs_threshold_y_fitting (int): Threshold on the y axis defining the objective function. Default value is set to '15'.
    vfs_threshold_x_interval (float): For unfit point expand by threshold_x_interval to each side to close unfit interval. Default value is set to '0.80'
    vfs_degree (int): Minimum degree for exploration. We start with polyfit in x^degree. Default value is set to '2'.
    vfs_max_deg (int): Max degree for exploration to which degree we try to fit function x^max_degree. Default value is set to '9'.
    vfs_early_stop (bool): If early_stop = True and improvement is not acceptable by increasing dimension, we stop. Default value set to 'True'.
    vfs_improvement_threshold (float): Sufficient improvement threshold (previous_mse - current_mse) >= improvement_threshold. Default value is set to '0.1'.
    vfs_penality_weight (int): Penalty for MSE to avoid overfitting with high dimension polynomial. Default value is set to '1'.
    vfs_x_labels (str): X axis label name validator graph. Default value is set to 'Traffic volume [veh/h]'.
    vfs_y_labels (str): Y axis label name validator graph. Default value is set to 'TTS [veh$\cdot$h]'.
    vfs_title (str): Title for validator graph. Default value is set to 'Fitted Curve with unfit Intervals for {self.instance_name}'.
    vfs_figsize_x (int): X size of the figure. Default value is set to '12'.
    vfs_figsize_y (int): Y size of the figure. Default value is set to '6'.
    vfs_font_size (int): Font size validator graph. Default value is set to '12'.
    ops_x_labels (str): X labels on the final graph. Default value is set to 'Traffic volume [veh/h]'.
    ops_y_labels (str): Y labels on the final graph. Default value is set to 'TTS [veh$\cdot$h]'.
    ops_title (str): Title on the final graph. Default value is set to 'Optimal Curve for {self.instance_name}'.
    ops_figsize_x (int): Figure size on the final graph. Default value is set to '10'.
    ops_figsize_y (int): Figure size on the final graph. Default value is set to '5'.
    ops_linewidth (int): Linewidth on the final graph. Default value is set to '3'.
    ops_number_x_points (int): Number of x axis points for the final graph. Default value is set to '400'.
    ops_predicted_points (bool): Display predicted points on the final graph. Default value is set to 'True'.
    ops_sigmoid_tailing (bool): Enable sigmoid tailing smoothener. Default value is set to 'True'.
    ops_sigmoid_width (int): Sigmoid width for the sigmoid smoothening. Default value is set to '15'.
    ops_threshold_plot (bool): Plot y_threshold on the final graph. Default value is set to 'True'.
    results_dir (str): Name of the results directory. Default value is set to 'results_dir_{instance_name}-{timestamp}'.
    log_filename (str): Filename for the log file. Default name is set to 'LOG-{self.instance_name}'.
    csv_filename (str): Final csv filename with the results. Default name is set to 'simex_output-{instance_name}'.
    """
    instance_name: str
    do_plot: bool = False
    extensive_search: bool = False
    extensive_iteration: bool = False
    SimEx_mode: str = "exploration"
    max_workers: int = 14
    domain_min_interval: int = 2500
    domain_max_interval: int = 4000
    modifier_incremental_unit: int = 25
    modifier_data_point: int = 100
    add_first_last_points: bool = False
    vfs_threshold_y_fitting: int = 15
    vfs_threshold_x_interval: float = 0.80
    vfs_degree: int = 2
    vfs_max_deg: int = 9
    vfs_early_stop: bool = True
    vfs_improvement_threshold: float = 0.1
    vfs_penality_weight: int = 1
    vfs_x_labels: str = 'Traffic volume [veh/h]'
    vfs_y_labels: str = 'TTS [veh$\cdot$h]'
    vfs_figsize_x: int = 12
    vfs_figsize_y: int = 6
    vfs_font_size: int = 12
    vfs_title: str = field(init=False)
    ops_x_labels: str = 'Traffic volume [veh/h]'
    ops_y_labels: str = 'TTS [veh$\cdot$h]'
    ops_title: str = field(init=False)
    ops_figsize_x: int = 10
    ops_figsize_y: int = 5
    ops_linewidth: int = 3
    ops_number_x_points: int = 400
    ops_predicted_points: bool = True
    ops_sigmoid_tailing: bool = True
    ops_sigmoid_width: int = 15
    ops_threshold_plot: bool = True
    results_dir: str = field(init=False)
    log_filename: str = field(init=False)
    csv_filename: str = field(init=False)

    def __post_init__(self):
        """ Define variables dependent on the instance name."""
        self.log_filename = f'LOG-{self.instance_name}'
        self.csv_filename = f'simex_output-{self.instance_name}'
        self.ops_title = f'Optimal Curve for {self.instance_name}'
        self.vfs_title = f'Fitted Curve with unfit Intervals for {self.instance_name}'
        self.results_dir = f'results_dir_{self.instance_name}-{timestamp}'

## Data and settings for log purposes ##
# These settings are filled during the runtime and used as a global data structure for the logger statistics.
# Modifier Global Statistics 
mgs = {"points_generated_total": 0, # Number of generated points TODO: Should be refactored
       "points_generation_intervals": 0, # Number of intervals generated TODO: Should be refactored
       "mod_iterations": 0}  # Number of modifier iterations TODO: Should be refactored

# Validator Global statistics
vgs = {"points_fitting_total": 0,  # Not used TODO: Should be refactored
       "points_unfitting_total": 0,  # Not used TODO: Should be refactored
       "intervals_unfit_total": 0}  # Not used TODO: Should be refactored

# Logger Granularity Settings
# log_granularity:
# 0 only general stats
# 1 minimal log
# 2 medium
# 3 detailed)
lgs = {"log_granularity": 3}
